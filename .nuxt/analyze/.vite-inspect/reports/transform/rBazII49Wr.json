{
  "resolvedId": "/Users/bensonmboci/Desktop/project/portfolio/portfolio/node_modules/@apollo/client/cache/inmemory/key-extractor.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { invariant } from \"../../utilities/globals/index.js\";\nimport { argumentsObjectFromField, DeepMerger, isNonEmptyArray, isNonNullObject, } from \"../../utilities/index.js\";\nimport { hasOwn, isArray } from \"./helpers.js\";\nvar specifierInfoCache = Object.create(null);\nfunction lookupSpecifierInfo(spec) {\n    var cacheKey = JSON.stringify(spec);\n    return (specifierInfoCache[cacheKey] ||\n        (specifierInfoCache[cacheKey] = Object.create(null)));\n}\nexport function keyFieldsFnFromSpecifier(specifier) {\n    var info = lookupSpecifierInfo(specifier);\n    return (info.keyFieldsFn || (info.keyFieldsFn = function (object, context) {\n            var extract = function (from, key) {\n                return context.readField(key, from);\n            };\n            var keyObject = (context.keyObject = collectSpecifierPaths(specifier, function (schemaKeyPath) {\n                var extracted = extractKeyPath(context.storeObject, schemaKeyPath, extract);\n                if (extracted === void 0 &&\n                    object !== context.storeObject &&\n                    hasOwn.call(object, schemaKeyPath[0])) {\n                    extracted = extractKeyPath(object, schemaKeyPath, extractKey);\n                }\n                invariant(extracted !== void 0, 4, schemaKeyPath.join(\".\"), object);\n                return extracted;\n            }));\n            return \"\".concat(context.typename, \":\").concat(JSON.stringify(keyObject));\n        }));\n}\nexport function keyArgsFnFromSpecifier(specifier) {\n    var info = lookupSpecifierInfo(specifier);\n    return (info.keyArgsFn ||\n        (info.keyArgsFn = function (args, _a) {\n            var field = _a.field, variables = _a.variables, fieldName = _a.fieldName;\n            var collected = collectSpecifierPaths(specifier, function (keyPath) {\n                var firstKey = keyPath[0];\n                var firstChar = firstKey.charAt(0);\n                if (firstChar === \"@\") {\n                    if (field && isNonEmptyArray(field.directives)) {\n                        var directiveName_1 = firstKey.slice(1);\n                        var d = field.directives.find(function (d) { return d.name.value === directiveName_1; });\n                        var directiveArgs = d && argumentsObjectFromField(d, variables);\n                        return (directiveArgs &&\n                            extractKeyPath(directiveArgs, keyPath.slice(1)));\n                    }\n                    return;\n                }\n                if (firstChar === \"$\") {\n                    var variableName = firstKey.slice(1);\n                    if (variables && hasOwn.call(variables, variableName)) {\n                        var varKeyPath = keyPath.slice(0);\n                        varKeyPath[0] = variableName;\n                        return extractKeyPath(variables, varKeyPath);\n                    }\n                    return;\n                }\n                if (args) {\n                    return extractKeyPath(args, keyPath);\n                }\n            });\n            var suffix = JSON.stringify(collected);\n            if (args || suffix !== \"{}\") {\n                fieldName += \":\" + suffix;\n            }\n            return fieldName;\n        }));\n}\nexport function collectSpecifierPaths(specifier, extractor) {\n    var merger = new DeepMerger();\n    return getSpecifierPaths(specifier).reduce(function (collected, path) {\n        var _a;\n        var toMerge = extractor(path);\n        if (toMerge !== void 0) {\n            for (var i = path.length - 1; i >= 0; --i) {\n                toMerge = (_a = {}, _a[path[i]] = toMerge, _a);\n            }\n            collected = merger.merge(collected, toMerge);\n        }\n        return collected;\n    }, Object.create(null));\n}\nexport function getSpecifierPaths(spec) {\n    var info = lookupSpecifierInfo(spec);\n    if (!info.paths) {\n        var paths_1 = (info.paths = []);\n        var currentPath_1 = [];\n        spec.forEach(function (s, i) {\n            if (isArray(s)) {\n                getSpecifierPaths(s).forEach(function (p) { return paths_1.push(currentPath_1.concat(p)); });\n                currentPath_1.length = 0;\n            }\n            else {\n                currentPath_1.push(s);\n                if (!isArray(spec[i + 1])) {\n                    paths_1.push(currentPath_1.slice(0));\n                    currentPath_1.length = 0;\n                }\n            }\n        });\n    }\n    return info.paths;\n}\nfunction extractKey(object, key) {\n    return object[key];\n}\nexport function extractKeyPath(object, path, extract) {\n    extract = extract || extractKey;\n    return normalize(path.reduce(function reducer(obj, key) {\n        return isArray(obj)\n            ? obj.map(function (child) { return reducer(child, key); })\n            : obj && extract(obj, key);\n    }, object));\n}\nfunction normalize(value) {\n    if (isNonNullObject(value)) {\n        if (isArray(value)) {\n            return value.map(normalize);\n        }\n        return collectSpecifierPaths(Object.keys(value).sort(), function (path) {\n            return extractKeyPath(value, path);\n        });\n    }\n    return value;\n}\n//# sourceMappingURL=key-extractor.js.map",
      "start": 1700234743249,
      "end": 1700234743354,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1700234743354,
      "end": 1700234743354,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1700234743354,
      "end": 1700234743354,
      "order": "pre"
    },
    {
      "name": "content-slot",
      "start": 1700234743354,
      "end": 1700234743354,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1700234743354,
      "end": 1700234743354,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1700234743354,
      "end": 1700234743354,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1700234743354,
      "end": 1700234743354,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1700234743354,
      "end": 1700234743354,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1700234743354,
      "end": 1700234743354,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1700234743354,
      "end": 1700234743354,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1700234743354,
      "end": 1700234743354,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1700234743354,
      "end": 1700234743354,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1700234743354,
      "end": 1700234743354,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1700234743354,
      "end": 1700234743354,
      "order": "normal"
    },
    {
      "name": "graphql",
      "start": 1700234743354,
      "end": 1700234743354,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1700234743354,
      "end": 1700234743354,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1700234743354,
      "end": 1700234743354,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1700234743354,
      "end": 1700234743354,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1700234743354,
      "end": 1700234743354,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1700234743354,
      "end": 1700234743354,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1700234743354,
      "end": 1700234743354,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1700234743354,
      "end": 1700234743354,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1700234743354,
      "end": 1700234743354,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1700234743354,
      "end": 1700234743355,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1700234743355,
      "end": 1700234743355,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1700234743355,
      "end": 1700234743355,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1700234743355,
      "end": 1700234743355,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1700234743355,
      "end": 1700234743355,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1700234743355,
      "end": 1700234743355,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1700234743355,
      "end": 1700234743355,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1700234743355,
      "end": 1700234743355,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1700234743355,
      "end": 1700234743355,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1700234743355,
      "end": 1700234743355,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1700234743355,
      "end": 1700234743355,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1700234743355,
      "end": 1700234743355,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1700234743355,
      "end": 1700234743355,
      "order": "normal"
    }
  ]
}
