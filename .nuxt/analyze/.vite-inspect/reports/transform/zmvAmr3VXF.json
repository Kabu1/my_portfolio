{
  "resolvedId": "/Users/bensonmboci/Desktop/project/portfolio/portfolio/node_modules/@apollo/client/utilities/graphql/fragments.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { __assign, __spreadArray } from \"tslib\";\nimport { invariant, newInvariantError } from \"../globals/index.js\";\nexport function getFragmentQueryDocument(document, fragmentName) {\n    var actualFragmentName = fragmentName;\n    var fragments = [];\n    document.definitions.forEach(function (definition) {\n        if (definition.kind === \"OperationDefinition\") {\n            throw newInvariantError(\n                70,\n                definition.operation,\n                definition.name ? \" named '\".concat(definition.name.value, \"'\") : \"\"\n            );\n        }\n        if (definition.kind === \"FragmentDefinition\") {\n            fragments.push(definition);\n        }\n    });\n    if (typeof actualFragmentName === \"undefined\") {\n        invariant(fragments.length === 1, 71, fragments.length);\n        actualFragmentName = fragments[0].name.value;\n    }\n    var query = __assign(__assign({}, document), { definitions: __spreadArray([\n            {\n                kind: \"OperationDefinition\",\n                operation: \"query\",\n                selectionSet: {\n                    kind: \"SelectionSet\",\n                    selections: [\n                        {\n                            kind: \"FragmentSpread\",\n                            name: {\n                                kind: \"Name\",\n                                value: actualFragmentName,\n                            },\n                        },\n                    ],\n                },\n            }\n        ], document.definitions, true) });\n    return query;\n}\nexport function createFragmentMap(fragments) {\n    if (fragments === void 0) { fragments = []; }\n    var symTable = {};\n    fragments.forEach(function (fragment) {\n        symTable[fragment.name.value] = fragment;\n    });\n    return symTable;\n}\nexport function getFragmentFromSelection(selection, fragmentMap) {\n    switch (selection.kind) {\n        case \"InlineFragment\":\n            return selection;\n        case \"FragmentSpread\": {\n            var fragmentName = selection.name.value;\n            if (typeof fragmentMap === \"function\") {\n                return fragmentMap(fragmentName);\n            }\n            var fragment = fragmentMap && fragmentMap[fragmentName];\n            invariant(fragment, 72, fragmentName);\n            return fragment || null;\n        }\n        default:\n            return null;\n    }\n}\n//# sourceMappingURL=fragments.js.map",
      "start": 1700234742308,
      "end": 1700234742432,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1700234742432,
      "end": 1700234742432,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1700234742432,
      "end": 1700234742432,
      "order": "pre"
    },
    {
      "name": "content-slot",
      "start": 1700234742432,
      "end": 1700234742432,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1700234742432,
      "end": 1700234742432,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1700234742432,
      "end": 1700234742432,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1700234742432,
      "end": 1700234742432,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1700234742432,
      "end": 1700234742432,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1700234742432,
      "end": 1700234742432,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1700234742432,
      "end": 1700234742432,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1700234742432,
      "end": 1700234742432,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1700234742432,
      "end": 1700234742432,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1700234742432,
      "end": 1700234742432,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1700234742432,
      "end": 1700234742432,
      "order": "normal"
    },
    {
      "name": "graphql",
      "start": 1700234742432,
      "end": 1700234742432,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1700234742432,
      "end": 1700234742432,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1700234742432,
      "end": 1700234742432,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1700234742432,
      "end": 1700234742432,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1700234742432,
      "end": 1700234742432,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1700234742432,
      "end": 1700234742432,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1700234742432,
      "end": 1700234742432,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1700234742432,
      "end": 1700234742432,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1700234742432,
      "end": 1700234742432,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1700234742432,
      "end": 1700234742433,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1700234742433,
      "end": 1700234742433,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1700234742433,
      "end": 1700234742433,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1700234742433,
      "end": 1700234742433,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1700234742433,
      "end": 1700234742433,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1700234742433,
      "end": 1700234742433,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1700234742433,
      "end": 1700234742433,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1700234742433,
      "end": 1700234742433,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1700234742433,
      "end": 1700234742433,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1700234742433,
      "end": 1700234742433,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1700234742433,
      "end": 1700234742433,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1700234742433,
      "end": 1700234742433,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1700234742433,
      "end": 1700234742433,
      "order": "normal"
    }
  ]
}
