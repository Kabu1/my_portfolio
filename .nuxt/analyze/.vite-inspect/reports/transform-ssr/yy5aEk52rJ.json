{
  "resolvedId": "/Users/bensonmboci/Desktop/project/portfolio/portfolio/node_modules/@apollo/client/cache/core/cache.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { __assign, __rest } from \"tslib\";\nimport { wrap } from \"optimism\";\nimport { getFragmentQueryDocument } from \"../../utilities/index.js\";\nvar ApolloCache = (function () {\n    function ApolloCache() {\n        this.assumeImmutableResults = false;\n        this.getFragmentDoc = wrap(getFragmentQueryDocument);\n    }\n    ApolloCache.prototype.batch = function (options) {\n        var _this = this;\n        var optimisticId = typeof options.optimistic === \"string\"\n            ? options.optimistic\n            : options.optimistic === false\n                ? null\n                : void 0;\n        var updateResult;\n        this.performTransaction(function () { return (updateResult = options.update(_this)); }, optimisticId);\n        return updateResult;\n    };\n    ApolloCache.prototype.recordOptimisticTransaction = function (transaction, optimisticId) {\n        this.performTransaction(transaction, optimisticId);\n    };\n    ApolloCache.prototype.transformDocument = function (document) {\n        return document;\n    };\n    ApolloCache.prototype.transformForLink = function (document) {\n        return document;\n    };\n    ApolloCache.prototype.identify = function (object) {\n        return;\n    };\n    ApolloCache.prototype.gc = function () {\n        return [];\n    };\n    ApolloCache.prototype.modify = function (options) {\n        return false;\n    };\n    ApolloCache.prototype.readQuery = function (options, optimistic) {\n        if (optimistic === void 0) { optimistic = !!options.optimistic; }\n        return this.read(__assign(__assign({}, options), { rootId: options.id || \"ROOT_QUERY\", optimistic: optimistic }));\n    };\n    ApolloCache.prototype.readFragment = function (options, optimistic) {\n        if (optimistic === void 0) { optimistic = !!options.optimistic; }\n        return this.read(__assign(__assign({}, options), { query: this.getFragmentDoc(options.fragment, options.fragmentName), rootId: options.id, optimistic: optimistic }));\n    };\n    ApolloCache.prototype.writeQuery = function (_a) {\n        var id = _a.id, data = _a.data, options = __rest(_a, [\"id\", \"data\"]);\n        return this.write(Object.assign(options, {\n            dataId: id || \"ROOT_QUERY\",\n            result: data,\n        }));\n    };\n    ApolloCache.prototype.writeFragment = function (_a) {\n        var id = _a.id, data = _a.data, fragment = _a.fragment, fragmentName = _a.fragmentName, options = __rest(_a, [\"id\", \"data\", \"fragment\", \"fragmentName\"]);\n        return this.write(Object.assign(options, {\n            query: this.getFragmentDoc(fragment, fragmentName),\n            dataId: id,\n            result: data,\n        }));\n    };\n    ApolloCache.prototype.updateQuery = function (options, update) {\n        return this.batch({\n            update: function (cache) {\n                var value = cache.readQuery(options);\n                var data = update(value);\n                if (data === void 0 || data === null)\n                    return value;\n                cache.writeQuery(__assign(__assign({}, options), { data: data }));\n                return data;\n            },\n        });\n    };\n    ApolloCache.prototype.updateFragment = function (options, update) {\n        return this.batch({\n            update: function (cache) {\n                var value = cache.readFragment(options);\n                var data = update(value);\n                if (data === void 0 || data === null)\n                    return value;\n                cache.writeFragment(__assign(__assign({}, options), { data: data }));\n                return data;\n            },\n        });\n    };\n    return ApolloCache;\n}());\nexport { ApolloCache };\n//# sourceMappingURL=cache.js.map",
      "start": 1700234746980,
      "end": 1700234747064,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1700234747064,
      "end": 1700234747064,
      "order": "pre"
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1700234747064,
      "end": 1700234747064,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1700234747064,
      "end": 1700234747064,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1700234747064,
      "end": 1700234747064,
      "order": "pre"
    },
    {
      "name": "content-slot",
      "start": 1700234747064,
      "end": 1700234747064,
      "order": "pre"
    },
    {
      "name": "content-slot",
      "start": 1700234747064,
      "end": 1700234747064,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1700234747064,
      "end": 1700234747064,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1700234747064,
      "end": 1700234747064,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1700234747064,
      "end": 1700234747064,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1700234747064,
      "end": 1700234747064,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1700234747064,
      "end": 1700234747064,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1700234747064,
      "end": 1700234747064,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1700234747064,
      "end": 1700234747064,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1700234747064,
      "end": 1700234747064,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1700234747064,
      "end": 1700234747064,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1700234747064,
      "end": 1700234747064,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1700234747064,
      "end": 1700234747064,
      "order": "normal"
    },
    {
      "name": "graphql",
      "start": 1700234747064,
      "end": 1700234747064,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1700234747064,
      "end": 1700234747064,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1700234747065,
      "end": 1700234747065,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1700234747065,
      "end": 1700234747065,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1700234747065,
      "end": 1700234747065,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1700234747065,
      "end": 1700234747065,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1700234747065,
      "end": 1700234747065,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1700234747065,
      "end": 1700234747065,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1700234747065,
      "end": 1700234747065,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1700234747065,
      "end": 1700234747065,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1700234747065,
      "end": 1700234747065,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1700234747065,
      "end": 1700234747065,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1700234747065,
      "end": 1700234747065,
      "order": "post"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1700234747065,
      "end": 1700234747065,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1700234747065,
      "end": 1700234747065,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1700234747065,
      "end": 1700234747065,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1700234747065,
      "end": 1700234747065,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1700234747065,
      "end": 1700234747065,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1700234747065,
      "end": 1700234747065,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1700234747065,
      "end": 1700234747065,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-template",
      "start": 1700234747065,
      "end": 1700234747065,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1700234747065,
      "end": 1700234747065,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1700234747065,
      "end": 1700234747065,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1700234747065,
      "end": 1700234747065,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1700234747065,
      "end": 1700234747065,
      "order": "normal"
    }
  ]
}
