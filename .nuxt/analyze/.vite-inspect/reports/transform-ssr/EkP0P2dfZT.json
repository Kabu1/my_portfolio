{
  "resolvedId": "/Users/bensonmboci/Desktop/project/portfolio/portfolio/node_modules/@apollo/client/cache/inmemory/readFromStore.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { __assign } from \"tslib\";\nimport { invariant, newInvariantError } from \"../../utilities/globals/index.js\";\nimport { Kind } from \"graphql\";\nimport { wrap } from \"optimism\";\nimport { isField, resultKeyNameFromField, isReference, makeReference, shouldInclude, addTypenameToDocument, getDefaultValues, getMainDefinition, getQueryDefinition, getFragmentFromSelection, maybeDeepFreeze, mergeDeepArray, DeepMerger, isNonNullObject, canUseWeakMap, compact, } from \"../../utilities/index.js\";\nimport { maybeDependOnExistenceOfEntity, supportsResultCaching, } from \"./entityStore.js\";\nimport { isArray, extractFragmentContext, getTypenameFromStoreObject, shouldCanonizeResults, } from \"./helpers.js\";\nimport { MissingFieldError } from \"../core/types/common.js\";\nimport { canonicalStringify, ObjectCanon } from \"./object-canon.js\";\nfunction execSelectionSetKeyArgs(options) {\n    return [\n        options.selectionSet,\n        options.objectOrReference,\n        options.context,\n        options.context.canonizeResults,\n    ];\n}\nvar StoreReader = (function () {\n    function StoreReader(config) {\n        var _this = this;\n        this.knownResults = new (canUseWeakMap ? WeakMap : Map)();\n        this.config = compact(config, {\n            addTypename: config.addTypename !== false,\n            canonizeResults: shouldCanonizeResults(config),\n        });\n        this.canon = config.canon || new ObjectCanon();\n        this.executeSelectionSet = wrap(function (options) {\n            var _a;\n            var canonizeResults = options.context.canonizeResults;\n            var peekArgs = execSelectionSetKeyArgs(options);\n            peekArgs[3] = !canonizeResults;\n            var other = (_a = _this.executeSelectionSet).peek.apply(_a, peekArgs);\n            if (other) {\n                if (canonizeResults) {\n                    return __assign(__assign({}, other), { result: _this.canon.admit(other.result) });\n                }\n                return other;\n            }\n            maybeDependOnExistenceOfEntity(options.context.store, options.enclosingRef.__ref);\n            return _this.execSelectionSetImpl(options);\n        }, {\n            max: this.config.resultCacheMaxSize,\n            keyArgs: execSelectionSetKeyArgs,\n            makeCacheKey: function (selectionSet, parent, context, canonizeResults) {\n                if (supportsResultCaching(context.store)) {\n                    return context.store.makeCacheKey(selectionSet, isReference(parent) ? parent.__ref : parent, context.varString, canonizeResults);\n                }\n            },\n        });\n        this.executeSubSelectedArray = wrap(function (options) {\n            maybeDependOnExistenceOfEntity(options.context.store, options.enclosingRef.__ref);\n            return _this.execSubSelectedArrayImpl(options);\n        }, {\n            max: this.config.resultCacheMaxSize,\n            makeCacheKey: function (_a) {\n                var field = _a.field, array = _a.array, context = _a.context;\n                if (supportsResultCaching(context.store)) {\n                    return context.store.makeCacheKey(field, array, context.varString);\n                }\n            },\n        });\n    }\n    StoreReader.prototype.resetCanon = function () {\n        this.canon = new ObjectCanon();\n    };\n    StoreReader.prototype.diffQueryAgainstStore = function (_a) {\n        var store = _a.store, query = _a.query, _b = _a.rootId, rootId = _b === void 0 ? \"ROOT_QUERY\" : _b, variables = _a.variables, _c = _a.returnPartialData, returnPartialData = _c === void 0 ? true : _c, _d = _a.canonizeResults, canonizeResults = _d === void 0 ? this.config.canonizeResults : _d;\n        var policies = this.config.cache.policies;\n        variables = __assign(__assign({}, getDefaultValues(getQueryDefinition(query))), variables);\n        var rootRef = makeReference(rootId);\n        var execResult = this.executeSelectionSet({\n            selectionSet: getMainDefinition(query).selectionSet,\n            objectOrReference: rootRef,\n            enclosingRef: rootRef,\n            context: __assign({ store: store, query: query, policies: policies, variables: variables, varString: canonicalStringify(variables), canonizeResults: canonizeResults }, extractFragmentContext(query, this.config.fragments)),\n        });\n        var missing;\n        if (execResult.missing) {\n            missing = [\n                new MissingFieldError(firstMissing(execResult.missing), execResult.missing, query, variables),\n            ];\n            if (!returnPartialData) {\n                throw missing[0];\n            }\n        }\n        return {\n            result: execResult.result,\n            complete: !missing,\n            missing: missing,\n        };\n    };\n    StoreReader.prototype.isFresh = function (result, parent, selectionSet, context) {\n        if (supportsResultCaching(context.store) &&\n            this.knownResults.get(result) === selectionSet) {\n            var latest = this.executeSelectionSet.peek(selectionSet, parent, context, this.canon.isKnown(result));\n            if (latest && result === latest.result) {\n                return true;\n            }\n        }\n        return false;\n    };\n    StoreReader.prototype.execSelectionSetImpl = function (_a) {\n        var _this = this;\n        var selectionSet = _a.selectionSet, objectOrReference = _a.objectOrReference, enclosingRef = _a.enclosingRef, context = _a.context;\n        if (isReference(objectOrReference) &&\n            !context.policies.rootTypenamesById[objectOrReference.__ref] &&\n            !context.store.has(objectOrReference.__ref)) {\n            return {\n                result: this.canon.empty,\n                missing: \"Dangling reference to missing \".concat(objectOrReference.__ref, \" object\"),\n            };\n        }\n        var variables = context.variables, policies = context.policies, store = context.store;\n        var typename = store.getFieldValue(objectOrReference, \"__typename\");\n        var objectsToMerge = [];\n        var missing;\n        var missingMerger = new DeepMerger();\n        if (this.config.addTypename &&\n            typeof typename === \"string\" &&\n            !policies.rootIdsByTypename[typename]) {\n            objectsToMerge.push({ __typename: typename });\n        }\n        function handleMissing(result, resultName) {\n            var _a;\n            if (result.missing) {\n                missing = missingMerger.merge(missing, (_a = {},\n                    _a[resultName] = result.missing,\n                    _a));\n            }\n            return result.result;\n        }\n        var workSet = new Set(selectionSet.selections);\n        workSet.forEach(function (selection) {\n            var _a, _b;\n            if (!shouldInclude(selection, variables))\n                return;\n            if (isField(selection)) {\n                var fieldValue = policies.readField({\n                    fieldName: selection.name.value,\n                    field: selection,\n                    variables: context.variables,\n                    from: objectOrReference,\n                }, context);\n                var resultName = resultKeyNameFromField(selection);\n                if (fieldValue === void 0) {\n                    if (!addTypenameToDocument.added(selection)) {\n                        missing = missingMerger.merge(missing, (_a = {},\n                            _a[resultName] = \"Can't find field '\".concat(selection.name.value, \"' on \").concat(isReference(objectOrReference)\n                                ? objectOrReference.__ref + \" object\"\n                                : \"object \" + JSON.stringify(objectOrReference, null, 2)),\n                            _a));\n                    }\n                }\n                else if (isArray(fieldValue)) {\n                    fieldValue = handleMissing(_this.executeSubSelectedArray({\n                        field: selection,\n                        array: fieldValue,\n                        enclosingRef: enclosingRef,\n                        context: context,\n                    }), resultName);\n                }\n                else if (!selection.selectionSet) {\n                    if (context.canonizeResults) {\n                        fieldValue = _this.canon.pass(fieldValue);\n                    }\n                }\n                else if (fieldValue != null) {\n                    fieldValue = handleMissing(_this.executeSelectionSet({\n                        selectionSet: selection.selectionSet,\n                        objectOrReference: fieldValue,\n                        enclosingRef: isReference(fieldValue) ? fieldValue : enclosingRef,\n                        context: context,\n                    }), resultName);\n                }\n                if (fieldValue !== void 0) {\n                    objectsToMerge.push((_b = {}, _b[resultName] = fieldValue, _b));\n                }\n            }\n            else {\n                var fragment = getFragmentFromSelection(selection, context.lookupFragment);\n                if (!fragment && selection.kind === Kind.FRAGMENT_SPREAD) {\n                    throw newInvariantError(9, selection.name.value);\n                }\n                if (fragment && policies.fragmentMatches(fragment, typename)) {\n                    fragment.selectionSet.selections.forEach(workSet.add, workSet);\n                }\n            }\n        });\n        var result = mergeDeepArray(objectsToMerge);\n        var finalResult = { result: result, missing: missing };\n        var frozen = context.canonizeResults\n            ? this.canon.admit(finalResult)\n            :\n                maybeDeepFreeze(finalResult);\n        if (frozen.result) {\n            this.knownResults.set(frozen.result, selectionSet);\n        }\n        return frozen;\n    };\n    StoreReader.prototype.execSubSelectedArrayImpl = function (_a) {\n        var _this = this;\n        var field = _a.field, array = _a.array, enclosingRef = _a.enclosingRef, context = _a.context;\n        var missing;\n        var missingMerger = new DeepMerger();\n        function handleMissing(childResult, i) {\n            var _a;\n            if (childResult.missing) {\n                missing = missingMerger.merge(missing, (_a = {}, _a[i] = childResult.missing, _a));\n            }\n            return childResult.result;\n        }\n        if (field.selectionSet) {\n            array = array.filter(context.store.canRead);\n        }\n        array = array.map(function (item, i) {\n            if (item === null) {\n                return null;\n            }\n            if (isArray(item)) {\n                return handleMissing(_this.executeSubSelectedArray({\n                    field: field,\n                    array: item,\n                    enclosingRef: enclosingRef,\n                    context: context,\n                }), i);\n            }\n            if (field.selectionSet) {\n                return handleMissing(_this.executeSelectionSet({\n                    selectionSet: field.selectionSet,\n                    objectOrReference: item,\n                    enclosingRef: isReference(item) ? item : enclosingRef,\n                    context: context,\n                }), i);\n            }\n            if (globalThis.__DEV__ !== false) {\n                assertSelectionSetForIdValue(context.store, field, item);\n            }\n            return item;\n        });\n        return {\n            result: context.canonizeResults ? this.canon.admit(array) : array,\n            missing: missing,\n        };\n    };\n    return StoreReader;\n}());\nexport { StoreReader };\nfunction firstMissing(tree) {\n    try {\n        JSON.stringify(tree, function (_, value) {\n            if (typeof value === \"string\")\n                throw value;\n            return value;\n        });\n    }\n    catch (result) {\n        return result;\n    }\n}\nfunction assertSelectionSetForIdValue(store, field, fieldValue) {\n    if (!field.selectionSet) {\n        var workSet_1 = new Set([fieldValue]);\n        workSet_1.forEach(function (value) {\n            if (isNonNullObject(value)) {\n                invariant(\n                    !isReference(value),\n                    10,\n                    getTypenameFromStoreObject(store, value),\n                    field.name.value\n                );\n                Object.values(value).forEach(workSet_1.add, workSet_1);\n            }\n        });\n    }\n}\n//# sourceMappingURL=readFromStore.js.map",
      "start": 1700234747572,
      "end": 1700234747764,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1700234747764,
      "end": 1700234747764,
      "order": "pre"
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1700234747764,
      "end": 1700234747764,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1700234747764,
      "end": 1700234747764,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1700234747764,
      "end": 1700234747764,
      "order": "pre"
    },
    {
      "name": "content-slot",
      "start": 1700234747764,
      "end": 1700234747764,
      "order": "pre"
    },
    {
      "name": "content-slot",
      "start": 1700234747764,
      "end": 1700234747764,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1700234747764,
      "end": 1700234747764,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1700234747764,
      "end": 1700234747764,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1700234747764,
      "end": 1700234747764,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1700234747764,
      "end": 1700234747764,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1700234747764,
      "end": 1700234747764,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1700234747764,
      "end": 1700234747764,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1700234747764,
      "end": 1700234747764,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1700234747764,
      "end": 1700234747764,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1700234747764,
      "end": 1700234747764,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1700234747764,
      "end": 1700234747764,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1700234747764,
      "end": 1700234747764,
      "order": "normal"
    },
    {
      "name": "graphql",
      "start": 1700234747764,
      "end": 1700234747764,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1700234747764,
      "end": 1700234747764,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1700234747764,
      "end": 1700234747764,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1700234747764,
      "end": 1700234747764,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1700234747764,
      "end": 1700234747765,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1700234747765,
      "end": 1700234747765,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1700234747765,
      "end": 1700234747765,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1700234747765,
      "end": 1700234747765,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1700234747765,
      "end": 1700234747765,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1700234747765,
      "end": 1700234747768,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1700234747768,
      "end": 1700234747768,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1700234747768,
      "end": 1700234747768,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1700234747768,
      "end": 1700234747768,
      "order": "post"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1700234747768,
      "end": 1700234747768,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1700234747768,
      "end": 1700234747768,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1700234747768,
      "end": 1700234747768,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1700234747768,
      "end": 1700234747768,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1700234747768,
      "end": 1700234747768,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1700234747768,
      "end": 1700234747768,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1700234747768,
      "end": 1700234747768,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-template",
      "start": 1700234747768,
      "end": 1700234747768,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1700234747768,
      "end": 1700234747768,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1700234747768,
      "end": 1700234747769,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1700234747769,
      "end": 1700234747769,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1700234747769,
      "end": 1700234747769,
      "order": "normal"
    }
  ]
}
